#데이터를 불러옴
setwd("D/Rdata")

#데이터 전처리
df<-read.csv("EastWestAirlinesNN.csv")
t(t(names(df)))
#쓸모없는 데이터 지움
df<-df[,-c(1)]
df<-df[1:4985,]
 
#훈련, 테스트 데이터 나눔
set.seed(1)
train.index<-sample(row.names(df), 0.6*dim(df)[1])
head(train.index)
valid.index<-setdiff(row.names(df), train.index)
train.df<-df[train.index,]
valid.df<-df[valid.index,]
t(t(names(valid.df)))

#정규화
library(caret)
norm.values<-preProcess(train.df[,-15], method="range")
train.norm.df<-predict(norm.values, train.df[-15])
valid.norm.df<-predict(norm.values, valid.df[,-15])

#더미데이터
train.df$Phone_sale<-as.factor(train.df$Phone_sale)
valid.df$Phone_sale<-as.factor(valid.df$Phone_sale)
head(train.df$Phone_sale)
valid.df$Phone.sale

#뉴럴냇 가동 히든5
library(neuralnet)
nn<-neuralnet(train.df$Phone_sale ~ Topflight + Balance + +Qual_miles + cc1_miles. + cc2_miles. + cc3_miles. + Bonus_miles + Bonus_trains + Filght_miles_12mo + Filght_trans_12 + Online_12  +Email + Club_member+Any_cc_miles_12mo, data = train.norm.df, linear.output = F, hidden = 5)
plot(nn)
str(nn)

#검증데이터와 학습데이터
training.prediction<-compute(nn, train.norm.df)
training.prediction
training.class<-apply(training.prediction$net.result,1,which.max)
training.class<-apply(training.prediction$net.result,1,which.max)-1
head(training.class)
training.prediction$net.result["1594",]
training.prediction$net.result["4365",]
confusionMatrix(as.factor(training.class), factor(train.df$Phone_sale))

validation.prediction<-compute(nn, valid.norm.df
validation.prediction
validation.calss<-apply(validation.prediction$net.result,1,which.max)
validation.class<-apply(validation.prediction$net.result,1,which.max)-1
str(validation.calss)
head*validation.class)
confusionMatrix(as.factor(validation.calss), as.factor(valid.df$Phone_sale)

#향상차트 및 10분위 차트
library(gains)
validation.prediction$net.result
validation.predictions<-validation.prediction$net.result[,2]
validation.predictions
str(validation.class)
length(train.df$Phone_sale)

#그리기
train.df$Phone_sale<-as.numeric(train.df$Phone_sale)-1
train.df$Phone_sale
valid.df$Phone_sale<-as.numeric(valid.df$Phone_sale)-1

#train data: output layer node 1, 2 output
predictions<-unlist(nn$net.result)
str(predictions)
predictions<-predictions[-c(1:2991)]
predictions
str(predictions)

gain<-gains(train.df$Phone_sale, predictions, groups=10)
gain
plot(c(0,gain$cume.pct.of.total*sum(train.df$Phone_sale)) ~ c(0,gain$cume.obs), xlab="# cases", ylab = "Cumulative", main="Lift chart for training data", type = "1")

lines(c(0,sum(train.df$Phone_sale)) ~c(0, dim(train.df)[1]), lty=1)
heights<-gain$mean.resp/mean(train.df$Phone_sale)
midpoints<-barplot(heights, names.arg = gain$depth, ylim=c(0,9), xlab = "percentile", ylab="Mean Response", main="Decile-wise chart for training data")

gain<-gains(valid.df$Phone_sale, validation.predictions, group = 10)
plot(c(0, gain$cume.pct.of.total*sum(valid.df$Phone)sale)) ~c(0, gain$cum.obs), xlab="# cases", ylab = "Cumlative", main="Lift chart for validation", type = "1")

#은닉층 노드1
train.df$Phone_sale <- as.factor(train.df$Phone_sale)
valid.df$Phone_sale <-as.factor(valid.df$Phone_sale)
nn<- neuralnet(train.df$Phone_sale ~ Topflight + Balance+cc1_miles. + cc2_miles.+cc3_miles.+Bonus_miles+Bonus_trans+Filght_miles_12mo+ Flight_trans_12+Online_12+Email+club_member+Any_cc_miles_12mo, data = train.norm.df, linear.output = F, hidden = 1)
plot(nn)







































